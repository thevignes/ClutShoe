<!-- Cropper.js CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">

<!-- Cropper.js JS -->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script> -->

 <%- include("../../views/partial/admin/header") %>
 <style>
    .content-main {
        padding: 20px;
        margin-left: 250px;
        width: calc(100% - 250px);
        transition: all 0.3s ease;
    }

    @media (max-width: 992px) {
        .content-main {
            margin-left: 0;
            width: 100%;
        }
    }

    .container-fluid {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .card {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .card-header {
        padding: 1rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        background: transparent;
    }

    .card-body {
        padding: 1.5rem;
    }

    .form-control, .form-select {
        height: 42px;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: #4a90e2;
        box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
    }

    textarea.form-control {
        height: auto;
        min-height: 100px;
    }

    .form-label {
        color: #2d3748;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .input-group-text {
        background: #f8fafc;
        border-color: #e2e8f0;
    }

    .btn-primary {
        background: #4a90e2;
        border: none;
        padding: 0.625rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: #357abd;
        transform: translateY(-1px);
    }

    .image-upload-container {
        position: relative;
        margin-bottom: 20px;
    }

    .image-preview {
        max-width: 100%;
        height: 200px;
        object-fit: cover;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .cropper-container {
        margin-top: 10px;
    }

    .error-message {
        color: #e53e3e;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    @media (max-width: 768px) {
        .content-main {
            padding: 15px;
        }

        .card-body {
            padding: 1rem;
        }

        .row {
            margin: 0 -10px;
        }

        .col-md-4, .col-md-6 {
            padding: 0 10px;
        }
    }
 </style>
    <section class="content-main">
        <div class="container-fluid">
            <div class="row justify-content-center">
                <div class="col-12">
                    <div class="content-header mb-4">
                        <h2 class="content-title">Add New Product</h2>
                    </div>
                </div>
                
                <div class="col-lg-9">
                    <form method="post" action="/admin/addProduct" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row">
                                    <!-- Basic Info -->
                                    <div class="col-12 mb-4">
                                        <label class="form-label">Product Name</label>
                                        <input type="text" name="productName" class="form-control" id="product_name" placeholder="Enter product name">
                                        <div id="productName-error" class="error-message"></div>
                                    </div>

                                    <div class="col-12 mb-4">
                                        <label class="form-label">Description</label>
                                        <textarea name="description" id="descriptionid" class="form-control" rows="4" placeholder="Product description"></textarea>
                                        <div id="description-error" class="error-message"></div>
                                    </div>

                                    <!-- Price Info -->
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label">Regular Price</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input type="text" name="regularPrice" class="form-control">
                                        </div>
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>

                                    <div class="col-md-4 mb-4">
                                        <label class="form-label">Sale Price</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input type="text" name="salePrice" class="form-control">
                                        </div>
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>

                                    <!-- <div class="col-md-4 mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input type="number" name="quantity" class="form-control">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div> -->

                                    <!-- Additional Info -->
                                    <div class="col-12 mb-4">
                                        <div id="sizeQuantityContainer" class="row g-3">
                                            <div class="size-quantity-row row align-items-center mb-2">
                                                <div class="col-md-4">
                                                    <select class="form-select" name="sizes[]" required>
                                                        <option value="">Select Size</option>
                                                        <% for(let i = 6; i <= 12; i++) { %>
                                                            <option value="<%= i %>">Size <%= i %></option>
                                                        <% } %>
                                                    </select>
                                                </div>
                                                <div class="col-md-4">
                                                    <input type="number" class="form-control" name="quantities[]" placeholder="Quantity" min="0" required>
                                                </div>
                                                <div class="col-md-4">
                                                    <button type="button" class="btn btn-danger remove-size" style="display: none;">Remove</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-secondary" id="addMoreSizes">Add Another Size</button>
                                        </div>
                                    </div>

                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            const container = document.getElementById('sizeQuantityContainer');
                                            const addButton = document.getElementById('addMoreSizes');

                                            function updateRemoveButtons() {
                                                const rows = container.getElementsByClassName('size-quantity-row');
                                                Array.from(rows).forEach((row, index) => {
                                                    const removeBtn = row.querySelector('.remove-size');
                                                    removeBtn.style.display = rows.length > 1 ? 'block' : 'none';
                                                });
                                            }

                                            addButton.addEventListener('click', function() {
                                                const newRow = container.querySelector('.size-quantity-row').cloneNode(true);
                                                newRow.querySelector('select').value = '';
                                                newRow.querySelector('input[type="number"]').value = '';
                                                container.appendChild(newRow);
                                                updateRemoveButtons();

                                                newRow.querySelector('.remove-size').addEventListener('click', function() {
                                                    newRow.remove();
                                                    updateRemoveButtons();
                                                });
                                            });

                                            document.querySelectorAll('.remove-size').forEach(button => {
                                                button.addEventListener('click', function() {
                                                    this.closest('.size-quantity-row').remove();
                                                    updateRemoveButtons();
                                                });
                                            });
                                        });
                                    </script>

                                    <div class="col-md-6 mb-4">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" name="category" style="width: 100%">
                                            <% for(let i=0; i<cate.length; i++) { %>
                                                <option value="<%= cate[i].name %>"><%= cate[i].name %></option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Images Section -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4 class="card-title mb-0">Product Images</h4>
                            </div>
                            <div class="card-body">
                                <div id="addedImagesContainer" class="row mb-4"></div>
                                
                                <div class="row">
                                    <% for(let i = 1; i <= 4; i++) { %>
                                        <div class="col-md-6 mb-4">
                                            <div class="image-upload-container">
                                                <img src="" alt="Preview" id="imgView<%= i %>" class="image-preview">
                                                <input class="form-control" type="file" name="images" id="input<%= i %>"
                                                    accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage(event, <%= i %>)">
                                                <div class="cropper-container" id="cropperContainer<%= i %>" style="display:none;">
                                                    <button type="button" class="btn btn-primary mt-2" id="saveButton<%= i %>" onclick="saveCroppedImage(<%= i %>)">
                                                        Save Cropped Image
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="text-end mb-4">
                            <button class="btn btn-primary" type="submit" onclick="validateAndSubmit()">
                                <i class="fas fa-plus me-2"></i>Publish Product
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <style>
        .size-variants {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        .form-check-inline {
            margin-right: 15px;
        }
        .form-check-input:checked {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
    </style>
    <script>
        let croppers = {};

        function viewImage(event, index) {
            const input = event.target;
            const imgView = document.getElementById('imgView' + index);
            const cropperContainer = document.getElementById('cropperContainer' + index);

            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    imgView.src = e.target.result;
                    imgView.style.display = 'block';
                    cropperContainer.style.display = 'block';

                    // Destroy existing cropper if any
                    if (croppers[index]) {
                        croppers[index].destroy();
                    }

                    // Initialize new cropper
                    croppers[index] = new Cropper(imgView, {
                        aspectRatio: 1,
                        viewMode: 1,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true,
                        ready() {
                            // Cropper.js is ready
                            console.log('Cropper is ready for image ' + index);
                        }
                    });
                };

                reader.readAsDataURL(input.files[0]);
            }
        }

        function saveCroppedImage(index) {
            if (!croppers[index]) {
                console.error('No cropper found for index ' + index);
                return;
            }

            const cropper = croppers[index];
            const canvas = cropper.getCroppedCanvas();
            
            if (!canvas) {
                console.error('Could not get cropped canvas');
                return;
            }

            // Convert canvas to blob
            canvas.toBlob(function(blob) {
                // Create a new File object
                const croppedFile = new File([blob], 'cropped-image-' + index + '.jpg', {
                    type: 'image/jpeg',
                    lastModified: new Date().getTime()
                });

                // Create a new FileList-like object
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);

                // Update the file input
                const fileInput = document.getElementById('input' + index);
                fileInput.files = dataTransfer.files;

                // Update preview
                const imgView = document.getElementById('imgView' + index);
                imgView.src = URL.createObjectURL(blob);

                // Hide cropper
                croppers[index].destroy();
                croppers[index] = null;
                document.getElementById('cropperContainer' + index).style.display = 'none';

                // Show success message
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: 'Image cropped successfully',
                    showConfirmButton: false,
                    timer: 3000
                });
            }, 'image/jpeg', 0.8);
        }

        function validateAndSubmit(){
            if(validateForm()){
                document.form[0].submit();
            }
        }

        function validateForm() {
            clearErrorMessage();

            const name = document.getElementsByName('productName')[0]?.value || '';
            const description = document.getElementById('descriptionid')?.value || '';
            const price = document.getElementsByName('regularPrice')[0]?.value || '';
            const category = document.getElementsByName('category')[0]?.value || '';
            const quantity = document.getElementsByName('quantity')[0]?.value || '';
            let isValid = true;

            if (name.trim() === "") {
                displayErrorMessage('productName-error', 'Please enter a product name');
                isValid = false;
            }

            if (description.trim() === "") {
                displayErrorMessage('description-error', 'Please enter a description');
                isValid = false;
            }

            // Parse price and validate
            const priceValue = parseFloat(price);
            if (!price || isNaN(priceValue) || priceValue <= 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid, positive price');
                isValid = false;
            }

            if (category.trim() === "") {
                displayErrorMessage('category-error', 'Please select a category');
                isValid = false;
            }

            const quantityValue = parseInt(quantity, 10);
            if (quantity.trim() === "" || isNaN(quantityValue) || quantityValue <= 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid quantity');
                isValid = false;
            }

            // Check if at least one size is selected
            const selectedSizes = document.querySelectorAll('.size-checkbox:checked');
            if (selectedSizes.length === 0) {
                document.getElementById('sizeError').classList.remove('d-none');
                isValid = false;
            }

            return isValid;
        }

        function clearErrorMessage() {
            const errorMessages = document.getElementsByClassName('error-message');
            for (let errorMessage of errorMessages) {
                errorMessage.innerHTML = "";
            }
            document.getElementById('sizeError').classList.add('d-none');
        }

        function displayErrorMessage(id, message){
            document.getElementById(id).innerHTML = message;
        }
    </script>
    
      
 <%- include("../../views/partial/admin/footer") %>
 
 
 
 