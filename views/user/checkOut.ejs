<%- include('../../views/partial/user/header', { user: user }) %>

<div class="container mt-4">
    <div class="row">
        <!-- Left Column for Address -->
        <div class="col-md-5">
            <div class="address_section p-3 border border-dark rounded">
                <h5>Shipping Address</h5>
                <!-- List of Addresses with Radio Buttons to Choose an Address -->
                <% addresses.forEach(function(address, index) { %>
                    <div class="mb-2 small-radio"> 
                        <input type="radio" name="selected_address" id="address<%= index %>" value="<%= address._id %>" <%=index === 0 ? 'checked' : '' %>>
                        <label for="address<%= index %>">
                            <span>Delivery to: <%= address.Firstname %></span>
                            <p><%= address.street %> <%= address.city %>, <%= address.state %> <%= address.pin %> <span> To: <%= address.type %></span></p>
                        </label>
                    </div>
                    <button class="edit-btn btn btn-link" style="background-color:#006A67; text-decoration: none; border: none;">
                        <a href="/editAddressPage/<%= address._id %>" class="text-white">Edit</a>
                    </button>
                <% }) %>

                <a href="/manageAddress">
                    <button class="btn btn-primary btn-sm mt-3">Add New Address</button>
                </a>
            </div>
        </div>

        <!-- Right Column for Order Review -->
        <div class="col-md-6 offset-md-1">
            <div class="order_review p-3 border border-dark rounded">
                <h4>Your Orders</h4>
                <div class="table-responsive order_table text-center">
                    <table class="table">
                      <thead>
                        <tr>
                          <th colspan="2">Product</th>
                          <th>Total</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% if (products && products.length > 0) { %>
                          <% products.forEach(productEntry => { %>
                            <tr>
                              <td class="image product-thumbnail">
                                <img src="/uploads/re-image/<%= productEntry.productId.images[0] %>" alt="<%= productEntry.productId.productName %>">
                              </td>
                              <td>
                                <h5><a href="shop-product-full.html"><%= productEntry.productId.productName %></a></h5>
                                <span class="product-qty">x <%= productEntry.quantity %></span>
                              </td>
                              <td><%= productEntry.subtotal.toFixed(2) %></td>
                            </tr>

                            <script>
                                const totalAmount = '<%= cart.totalAmount %>';
                                console.log("Grand Total:", totalAmount);
                            </script>
                          <% }) %>
                        <% } else { %>
                          <tr>
                            <td colspan="3">Your cart is empty.</td>
                          </tr>
                        <% } %>
                        
                        <tr>
                          <th>SubTotal</th>
                          <td class="product-subtotal" colspan="2"><span id="subtotal"><%= cartTotals.total.toFixed(2) %></span></td>
                        </tr>
                        
                        <tr>
                          <th>Discount</th>
                          <td colspan="2"><span id="discountAmount"><%= cart.discountAmount ? cart.discountAmount.toFixed(2) : '0.00' %></span></td>
                        </tr>
                  
                        <tr>
                          <th>Final Total</th>
                          <td colspan="2">
                            <span id="finalTotal">
                              <%= cartTotals && cartTotals.finalTotal ? cartTotals.finalTotal.toFixed(2) : '0.00' %>
                            </span>
                          </td>
                        </tr>
                        
                        <tr>
                          <th>Shipping</th>
                          <td colspan="2"><em>Free Shipping</em></td>
                        </tr>
                  
                 
                      </tbody>
                    </table>
                  </div>
                  
                <!-- Coupons Section -->
                <div class="coupon_section">
                    <h5>Available Coupons</h5>
                    <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#couponModal">View Coupons</button>
                </div>

                <div class="bt-1 border-color-1 mt-3 mb-3"></div>

                <div class="payment_method">
                    <div class="mb-3">
                        <h5>Payment</h5>
                        <!-- Wallet Payment Option -->
                        <div class="custome-radio">
                            <input class="form-check-input" required type="radio" name="payment_option" value="wallet" id="exampleRadios3">
                            <label class="form-check-label" for="exampleRadios3">Wallet</label>
                        </div>
                        <!-- Cash on Delivery Option -->
                        <div class="custome-radio">
                            <input class="form-check-input" required type="radio" name="payment_option" value="COD" id="exampleRadios4" checked>
                            <label class="form-check-label" for="exampleRadios4">Cash on Delivery</label>
                        </div>
                        <!-- Razorpay Option -->
                        <div class="custome-radio">
                            <input class="form-check-input" required type="radio" name="payment_option" id="exampleRadios5" value="razorpay">
                            <label class="form-check-label" for="exampleRadios5">Razorpay</label>
                        </div>
                    </div>
                    <!-- Buttons -->
                    <div id="razorpayButtonContainer" class="hidden">
                        <button type="submit" class="btn btn-fill-out btn-block mt-3" id="onlinePayment">Place Order</button>
                    </div>
                    <div id="codButtonContainer">
                        <button type="submit" class="btn btn-fill-out btn-block mt-3" id="placeOrderBtn">Place Order</button>
                    </div>
                </div>
                
            </div>

            <!-- Coupon Form -->
            <form id="couponForm" class="mt-3">
                <label for="couponCode">Enter Coupon Code:</label>
                <input type="text" id="couponCode" name="couponCode" class="form-control" required>
                <input type="hidden" id="orderValue" name="orderValue" value="<%= cartTotals.total.toFixed(2) %>">
                <input type="hidden" id="userId" name="userId" value="<%= userId %>">
                <button type="button" class="btn btn-primary mt-2" onclick="applyCoupon()">Apply Coupon</button>
            </form>
        </div>
    </div>
</div>

        <tr>
        <td colspan="3">
            <div class="coupon_item" >
            
                <button class="btn btn-sm btn-danger" onclick="removeCoupon('<%= userId %>')" 
                style="position: absolute;
                  right: 20%;
                  bottom: -2%;">Remove Coupon</button>

            </div>
        </td>
        </tr>


<!-- Modal for Coupons -->
<div class="modal fade" id="couponModal" tabindex="-1" role="dialog" aria-labelledby="couponModalLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
       <div class="modal-content">
           <div class="modal-header">
               <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
               <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                   <span aria-hidden="true">&times;</span>
               </button>
           </div>
           <div class="modal-body">
<!-- If no coupon is applied, show available coupons -->
                <% coupons.forEach(function(coupon) { %>
                    <div class="coupon_item">
                        <p><%= coupon.couponCode %> - <%= coupon.description %></p>
                        <button class="btn btn-sm btn-primary" onclick="copyCoupon('<%= coupon.couponCode %>')">Copy</button>
                    </div>
                <% }) %>
     
        </div>
        
            
       </div>
   </div>
</div>

<style>
    .address_section,
    .order_review {
        border: 2px solid #333;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 8px;
    }

    .address_section h5,
    .order_review h4 {
        margin-bottom: 15px;
        color: #333;
        font-weight: bold;
    }

    .small-radio input[type="radio"] {
        width: 15px;
        height: 15px;
    }

    .coupon_section {
        margin-top: 20px;
    }

    .btn-fill-out {
        background-color: #006A67;
        color: white;
    }

    .modal-body {
        max-height: 400px;
        overflow-y: auto;
    }

    .modal-dialog {
        max-width: 600px;
    }

    footer {
        width: 100%;
        background-color: #f8f9fa;
        padding: 20px 0;
    }

    footer .footer-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 10px;
        text-align: center;
    }

    .container-fluid {
        width: 100%;
        padding-left: 0;
        padding-right: 0;
    }

    footer a {
        color: #006A67;
        text-decoration: none;
    }

    footer a:hover {
        text-decoration: underline;
    }
</style>

<%- include('../../views/partial/user/footer') %>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<!-- Bootstrap CSS -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">

<!-- Bootstrap JS (including jQuery and Popper.js for the modal to work) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script>
    function copyCoupon(couponCode) {
        navigator.clipboard.writeText(couponCode)
            .then(function() {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: 'Coupon Code Copied!',
                    text: couponCode,
                    showConfirmButton: false,
                    timer: 2000,
                    timerProgressBar: true
                });
            })
            .catch(function(err) {
                console.error('Error copying text:', err);
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Failed to copy coupon code',
                    showConfirmButton: false,
                    timer: 2000,
                    timerProgressBar: true
                });
            });
    }
</script>

        <script>
            // Show the add address form
            function showAddAddressForm() {
                document.getElementById('addressForm').style.display = 'block';
            }

            // Hide the add address form
            function hideAddressForm() {
                document.getElementById('addressForm').style.display = 'none';
            }




        </script>

        <script>
          async function placeOrder() {
    document.getElementById('placeOrderBtn').addEventListener('click', function () {
        const selectedAddress = document.querySelector('input[name="selected_address"]:checked');
        const selectedPaymentOption = document.querySelector('input[name="payment_option"]:checked');
        const couponCode = document.getElementById('couponCode')?.value.trim(); // Get coupon code if available

        if (!selectedAddress || !selectedPaymentOption) {
            Swal.fire({
                icon: 'warning',
                title: 'Incomplete Information',
                text: 'Please select both an address and a payment option.',
                confirmButtonText: 'Okay'
            });
            return;
        }

        const data = {
            addressId: selectedAddress.value,
            paymentOption: selectedPaymentOption.value,
            couponCode: couponCode || null, // Include coupon code if provided
        };

        fetch('/order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    position: "top-end",
                    icon: 'success',
                    timer: 1500,
                    title: 'Order Placed Successfully',
                    text: data.message,
                    showConfirmButton: false,
                }).then(() => {
                    // window.location.href = '/order-success'; // Redirect to success page
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: 'Order failed. Please try again.',
                    confirmButtonText: 'Try Again'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Server Error',
                text: 'An error occurred while placing the order.',
                confirmButtonText: 'Close'
            });
        });
    });
}

placeOrder()
   async function applyCoupon() {
    const couponCode = document.getElementById('couponCode').value;
    const orderValue = parseFloat(document.getElementById('orderValue').value); 
    const userId = document.getElementById('userId').value;
    try {
        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, couponCode, orderValue })
        });
        const data = await response.json();

        if (response.ok) {
           
            document.getElementById("discountAmount").innerText = data.discount.toFixed(2);
            document.getElementById("finalTotal").innerText = data.finalPrice.toFixed(2);
            
            Swal.fire({
                icon: 'success',
                title: `Discount Applied! You saved ${data.discount.toFixed(2)}`,
                text: `Final Price: $${data.finalPrice.toFixed(2)}`,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Unexpected Error',
            text: 'There was an error applying the coupon.',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });
    }
}

async function removeCoupon(userId) {
  try {
    const response = await fetch('/delete-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: userId })  
    });

    const result = await response.json();

    if (response.ok) {
      document.getElementById("discountAmount").innerText = "0.00";
      document.getElementById("finalTotal").innerText = result.newTotal.toFixed(2);

      Swal.fire({
        icon: 'success',
        title: result.message || 'Coupon removed successfully',
        text: `New total: ₹${result.newTotal.toFixed(2)}`,
        toast: true,
        position: 'top-end',
        timer: 3000,
        timerProgressBar: true,
        showConfirmButton: false
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.message,
        toast: true,
        position: 'top-end',
        timer: 3000,
        timerProgressBar: true,
        showConfirmButton: false
      });
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Severe error occurred',
      toast: true,
      position: 'top-end',
      timer: 3000,
      timerProgressBar: true,
      showConfirmButton: false
    });
  }
}
document.getElementById('onlinePayment').addEventListener('click', async function() {
    const selectedAddress = document.querySelector('input[name="selected_address"]:checked');
    const selectedPaymentOption = document.querySelector('input[name="payment_option"]:checked');
    const data = {
        addressId: selectedAddress.value,
    };

    try {
       
        const orderResponse = await fetch("/create-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ amount:totalAmount })
        });
        const order = await orderResponse.json();

  
        const options = {
            key: "rzp_test_qT7pjheiiJYL7l",
            amount: order.amount,
            currency: "INR",
            name: "Test Company",
            description: "Test Transaction",
            order_id: order.id,
            handler: async function (response) {
       
                const verifyResponse = await fetch("/verify", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                        data
                    }),
                });

                const verificationResult = await verifyResponse.json();
                
               
                if (verificationResult.status === "success") {
                 
                    Swal.fire({
                        position: 'top-right',
                        icon: 'success',
                        title: 'Payment verified and order placed successfully!',
                        showConfirmButton: false,
                        timer: 3000,
                        toast: true,
                        background: '#28a745',
                        color: '#fff',
                        animation: false 
                    });
window.location.href='/success'
               
                    placeOrder();
                } else {
                
                    Swal.fire({
                        position: 'top-right',
                        icon: 'error',
                        title: 'Payment verification failed.',
                        showConfirmButton: false,
                        timer: 3000,
                        toast: true,
                        background: '#dc3545', 
                        color: '#fff',
                    });
                }
            },
            prefill: {
                name: "vignesh",
                email: "vigneshkdr777@gmail.com",
                contact: "1234567890",
            },
        };

      
        const rzp1 = new Razorpay(options);
        rzp1.open();

    } catch (error) {
        console.error("Payment error:", error);
        alert("Payment failed. Please try again.");
    }
});




document.addEventListener('DOMContentLoaded', () => {
        const paymentOptions = document.getElementsByName('payment_option');
        const razorpayButtonContainer = document.getElementById('razorpayButtonContainer');
        const codButtonContainer = document.getElementById('codButtonContainer');

        // Function to toggle visibility based on selected option
        function updateButtonVisibility() {
            const selectedOption = [...paymentOptions].find(option => option.checked)?.value;
            if (selectedOption === 'razorpay') {
                razorpayButtonContainer.classList.remove('hidden');
                codButtonContainer.classList.add('hidden');
            } else {
                razorpayButtonContainer.classList.add('hidden');
                codButtonContainer.classList.remove('hidden');
            }
        }

        // Add event listeners to all payment options
        paymentOptions.forEach(option => {
            option.addEventListener('change', updateButtonVisibility);
        });

        // Initialize visibility on page load
        updateButtonVisibility();
    });
</script>

